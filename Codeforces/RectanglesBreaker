string solve1(vector<vi> &a){
}

string solve2(vector<vi> &r){
    vi temp;
    for(auto x: r) for(auto y: x) temp.push_back(y);
    sort(temp.begin(), temp.end());
    temp.resize(unique(temp.begin(), temp.end()) - temp.begin());
    int n = temp.size();
    vi convert(1000001);
    for(int i = 0; i < n; i ++) convert[temp[i]] = i;
    vector<vi> mark(n, vi(n));
    for(int i = 1; i < 3; i ++){
        for(int x = convert[r[i][0]]; x < convert[r[i][2]]; x ++){
            for(int y = convert[r[i][1]]; y < convert[r[i][3]]; y ++){
                mark[x][y] ++;
            }
        }
    }
    for(int x = convert[r[0][0]]; x < convert[r[0][2]]; x ++){
        for(int y = convert[r[0][1]]; y < convert[r[0][3]]; y ++){
            if(!mark[x][y]){
                return "YES";
            }
        }
    }
    return "NO";
}

int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    int M;
    cin >> M;
    while(1){
        vector<vi> r(3, vi(4));
        for(auto &x: r){
            for(auto &y: x) y = rnd() % M;
            if(x[0] == x[2]) x[2] ++;
            else if(x[0] > x[2]) swap(x[0], x[2]);
            if(x[1] == x[3]) x[3] ++;
            else if(x[1] > x[3]) swap(x[1], x[3]);
        }
        if(solve1(r) != solve2(r)){
            cout << "Failed at\n " << r;
            cout << "Solve1 = " << solve1(r) << "\nSolve2 = " << solve2(r);
            return 0;
        }
    }
    return 0;
}